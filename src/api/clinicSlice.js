import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Define your base URL
const baseUrl = "https://back.biopluskw.com/api/v1";

// Create the API slice using RTK Query
export const clinicApi = createApi({
  reducerPath: "clinicApi",
  baseQuery: fetchBaseQuery({
    baseUrl,
    prepareHeaders: (headers) => {
      // Get the token from localStorage (or Redux state)
      const token = localStorage.getItem("doctor_token");

      // If a token exists, add it to the headers
      if (token) {
        headers.set("Authorization", `Bearer ${token}`);
      }

      return headers;
    },
  }),
  endpoints: (builder) => ({
    getClinics: builder.query({
      query: (params = {}) => {
        const { page = 1, limit = 10, search = '' } = params;
        const queryParams = new URLSearchParams();
        
        if (page) queryParams.append('page', page);
        if (limit) queryParams.append('limit', limit);
        if (search) queryParams.append('search', search);
        
        const queryString = queryParams.toString();
        return `/admin/clinics${queryString ? `?${queryString}` : ''}`;
      },
    }),
    getClinic: builder.query({
      query: (id) => `/admin/clinics/${id}`,
    }),
    addClinic: builder.mutation({
      query: (data) => ({
        url: "/admin/clinics",
        method: "POST",
        body: data,
      }),
    }),
    updateClinic: builder.mutation({
      query: ({ id, data }) => ({
        url: `/admin/clinics/${id}`,
        method: "PUT",
        body: data,
      }),
    }),
    deleteClinic: builder.mutation({
      query: (id) => ({
        url: `/admin/clinics/${id}`,
        method: "DELETE",
      }),
    }),
  }),
});

// Export hooks generated by the API service
export const {
  useGetClinicsQuery,
  useGetClinicQuery,
  useAddClinicMutation,
  useUpdateClinicMutation,
  useDeleteClinicMutation,
} = clinicApi;
